#version 330 core

// Input vertex data, different for all executions of this shader.
layout(location = 0) in vec3 vertexPosition_modelspace;
layout(location = 1) in vec2 vertexUV;
layout(location = 2) in vec3 normal;
layout(location = 3) in uint textureIndex;

// Output data ; will be interpolated for each fragment.
out vec2 UV;
out vec2 envUV;
out vec3 carColour;
out vec3 surfaceNormal;
out vec3 toLightVector;
out vec3 toCameraVector;
flat out uint texIndex;

// Values that stay constant for the whole mesh.
uniform mat4 projectionMatrix, viewMatrix, transformationMatrix;
uniform vec3 colour;
uniform vec3 lightPosition;

void main(){
    vec4 worldPosition = transformationMatrix * vec4(vertexPosition_modelspace, 1.0);

    // Pass through texture Index (Used for NFS2 car multitex)
    texIndex = textureIndex;

	// Output position of the vertex, in clip space : MVP * position
	gl_Position =  projectionMatrix * viewMatrix * worldPosition;

    surfaceNormal = (transformationMatrix * vec4(normal, 0.0)).xyz;
    toLightVector = lightPosition - worldPosition.xyz;
    toCameraVector = (inverse(viewMatrix) * vec4(0.0, 0.0, 0.0, 1.0)).xyz - worldPosition.xyz;

    vec3 envReflectVector = reflect( toCameraVector, surfaceNormal);
    float m = 2. * sqrt(
        pow( envReflectVector.x, 2. ) +
        pow( envReflectVector.y, 2. ) +
        pow( envReflectVector.z + 1., 2. )
      );
    envUV = envReflectVector.xy / m + .5;

    // Pass through slider Colour
    carColour = colour;
	// UV of the vertex. No special space for this one.
	UV = vertexUV;
}

