#version 330 core

// Input vertex data, different for all executions of this shader.
layout(location = 0) in vec3 vertexPosition_modelspace;
layout(location = 1) in vec2 vertexUV;
layout(location = 2) in vec3 normal;

// Output data ; will be interpolated for each fragment.
out vec2 UV;
out vec3 surfaceNormal;
out vec3 toCameraVector;

// Values that stay constant for the whole mesh.
uniform mat4 projectionMatrix, viewMatrix, transformationMatrix;
uniform vec3 billboardPos; // Position of the center of the billboard
uniform vec2 billboardSize; // Size of the billboard, in world units (probably meters)

void main(){
    vec4 worldPosition = transformationMatrix * vec4(vertexPosition_modelspace, 1.0);

	// Output position of the vertex, in clip space : MVP * position
	//gl_Position =  projectionMatrix * viewMatrix * worldPosition;

    surfaceNormal = (transformationMatrix * vec4(normal, 0.0)).xyz;
    toCameraVector = (inverse(viewMatrix) * vec4(0.0, 0.0, 0.0, 1.0)).xyz - worldPosition.xyz;

    vec3 particleCenter_wordspace = billboardPos;

    vec3 CameraRight_worldspace = vec3(viewMatrix[0][0], viewMatrix[1][0], viewMatrix[2][0]);
    vec3 CameraUp_worldspace = vec3(viewMatrix[0][1], viewMatrix[1][1], viewMatrix[2][1]);

    vec3 vertexPosition_worldspace = particleCenter_wordspace
    	+ CameraRight_worldspace * vertexPosition_modelspace.x * billboardSize.x
   		+ CameraUp_worldspace * vertexPosition_modelspace.y * billboardSize.y;

    // Output position of the vertex
    gl_Position = projectionMatrix * viewMatrix * vec4(vertexPosition_worldspace, 1.0f);

	// UV of the vertex
	UV = vec2(1.0, 1.0); //vertexUV;
}