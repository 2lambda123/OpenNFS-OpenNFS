#version 330 core

// Input vertex data, different for all executions of this shader.
layout(location = 0) in vec3 vertexPosition_modelspace;
layout(location = 1) in vec2 vertexUV;
layout(location = 2) in uint textureIndex;
layout(location = 3) in vec4 nfsData;
layout(location = 4) in vec3 normal;

// Output data ; will be interpolated for each fragment.
out vec2 UV;
out flat uint texIndex;
out vec4 nfsDataOut;

// Fog
out vec3 world_pos;
out vec3 world_normal;
out vec4 viewSpace;

// Values that stay constant for the whole mesh.
uniform mat4 projectionMatrix, viewMatrix ,transformationMatrix;

void main(){
    // Pass through texture Index
    texIndex = textureIndex;

    // Pass through nfs shading data
    nfsDataOut = nfsData;

    world_normal = (transformationMatrix * vec4(normal, 0.0)).xyz;
    world_pos = (transformationMatrix * vec4(vertexPosition_modelspace, 1.0)).xyz;
    viewSpace = viewMatrix * transformationMatrix *  vec4(vertexPosition_modelspace, 1);

	// Output position of the vertex, in clip space : MVP * position
    gl_Position =  projectionMatrix * viewMatrix * vec4(world_pos, 1.0);
	
	// UV of the vertex. No special space for this one.
	UV = vertexUV;
}

